{
  "info": {
    "name": "E-commerce Product Management API",
    "description": "Complete API collection for testing the Spring Boot e-commerce product management system",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "basic",
    "basic": [
      {
        "key": "username",
        "value": "user",
        "type": "string"
      },
      {
        "key": "password",
        "value": "{{auth_password}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "auth_password",
      "value": "replace-with-generated-password",
      "type": "string"
    },
    {
      "key": "product_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health & Monitoring",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/actuator/health",
              "host": ["{{base_url}}"],
              "path": ["actuator", "health"]
            }
          },
          "response": []
        },
        {
          "name": "Application Info",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/actuator/info",
              "host": ["{{base_url}}"],
              "path": ["actuator", "info"]
            }
          },
          "response": []
        },
        {
          "name": "Metrics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/actuator/metrics",
              "host": ["{{base_url}}"],
              "path": ["actuator", "metrics"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Product Management",
      "item": [
        {
          "name": "Get All Products",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is JSON array\", function () {",
                  "    pm.response.to.be.json;",
                  "    pm.expect(pm.response.json()).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 2000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/products",
              "host": ["{{base_url}}"],
              "path": ["api", "products"]
            }
          },
          "response": []
        },
        {
          "name": "Create Product",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Product created successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData.name).to.eql('Postman Test Product');",
                  "    pm.expect(jsonData.price).to.eql(299.99);",
                  "    ",
                  "    // Save product ID for other tests",
                  "    pm.collectionVariables.set('product_id', jsonData.id);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Postman Test Product\",\n  \"description\": \"This product was created via Postman for testing purposes\",\n  \"price\": 299.99,\n  \"quantity\": 50,\n  \"sku\": \"POSTMAN-001\",\n  \"category\": \"Electronics\",\n  \"brand\": \"TestBrand\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/products",
              "host": ["{{base_url}}"],
              "path": ["api", "products"]
            }
          },
          "response": []
        },
        {
          "name": "Get Product by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Product details are correct\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('price');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/products/{{product_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "products", "{{product_id}}"]
            }
          },
          "response": []
        },
        {
          "name": "Update Product",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Product updated successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.name).to.eql('Updated Postman Product');",
                  "    pm.expect(jsonData.price).to.eql(399.99);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Postman Product\",\n  \"description\": \"This product was updated via Postman\",\n  \"price\": 399.99,\n  \"quantity\": 75,\n  \"sku\": \"POSTMAN-001-UPDATED\",\n  \"category\": \"Electronics\",\n  \"brand\": \"TestBrand\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/products/{{product_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "products", "{{product_id}}"]
            }
          },
          "response": []
        },
        {
          "name": "Delete Product",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "",
                  "pm.test(\"Response body is empty\", function () {",
                  "    pm.expect(pm.response.text()).to.be.empty;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/products/{{product_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "products", "{{product_id}}"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Search & Filtering",
      "item": [
        {
          "name": "Search Products by Name",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Search results contain query term\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0].name.toLowerCase()).to.include('iphone');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/products/search?name=iPhone",
              "host": ["{{base_url}}"],
              "path": ["api", "products", "search"],
              "query": [
                {
                  "key": "name",
                  "value": "iPhone"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Products by Price Range",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Products are within price range\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    jsonData.forEach(function(product) {",
                  "        pm.expect(product.price).to.be.at.least(100);",
                  "        pm.expect(product.price).to.be.at.most(500);",
                  "    });",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/products/price-range?minPrice=100&maxPrice=500",
              "host": ["{{base_url}}"],
              "path": ["api", "products", "price-range"],
              "query": [
                {
                  "key": "minPrice",
                  "value": "100"
                },
                {
                  "key": "maxPrice",
                  "value": "500"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Low Stock Products",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Products have low stock\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    jsonData.forEach(function(product) {",
                  "        pm.expect(product.quantity).to.be.at.most(20);",
                  "    });",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/products/low-stock?threshold=20",
              "host": ["{{base_url}}"],
              "path": ["api", "products", "low-stock"],
              "query": [
                {
                  "key": "threshold",
                  "value": "20"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Products by Category",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Products belong to correct category\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    jsonData.forEach(function(product) {",
                  "        pm.expect(product.category).to.eql('Electronics');",
                  "    });",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/products/category/Electronics",
              "host": ["{{base_url}}"],
              "path": ["api", "products", "category", "Electronics"]
            }
          },
          "response": []
        },
        {
          "name": "Get Products by Brand",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/products/brand/Apple",
              "host": ["{{base_url}}"],
              "path": ["api", "products", "brand", "Apple"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Inventory Management",
      "item": [
        {
          "name": "Update Product Inventory",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Inventory updated correctly\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.quantity).to.eql(100);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/products/{{product_id}}/inventory?quantity=100",
              "host": ["{{base_url}}"],
              "path": ["api", "products", "{{product_id}}", "inventory"],
              "query": [
                {
                  "key": "quantity",
                  "value": "100"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Bulk Create Products",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Bulk creation successful\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    pm.expect(jsonData.length).to.eql(3);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n  {\n    \"name\": \"Bulk Product 1\",\n    \"description\": \"First bulk created product\",\n    \"price\": 199.99,\n    \"quantity\": 30,\n    \"sku\": \"BULK-001\",\n    \"category\": \"Electronics\",\n    \"brand\": \"BulkBrand\"\n  },\n  {\n    \"name\": \"Bulk Product 2\",\n    \"description\": \"Second bulk created product\",\n    \"price\": 149.99,\n    \"quantity\": 25,\n    \"sku\": \"BULK-002\",\n    \"category\": \"Electronics\",\n    \"brand\": \"BulkBrand\"\n  },\n  {\n    \"name\": \"Bulk Product 3\",\n    \"description\": \"Third bulk created product\",\n    \"price\": 99.99,\n    \"quantity\": 40,\n    \"sku\": \"BULK-003\",\n    \"category\": \"Electronics\",\n    \"brand\": \"BulkBrand\"\n  }\n]"
            },
            "url": {
              "raw": "{{base_url}}/api/products/bulk",
              "host": ["{{base_url}}"],
              "path": ["api", "products", "bulk"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Error Testing",
      "item": [
        {
          "name": "Get Non-existent Product",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Error message is present\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/products/non-existent-id",
              "host": ["{{base_url}}"],
              "path": ["api", "products", "non-existent-id"]
            }
          },
          "response": []
        },
        {
          "name": "Create Invalid Product",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation errors are present\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"\",\n  \"price\": -10,\n  \"quantity\": -5\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/products",
              "host": ["{{base_url}}"],
              "path": ["api", "products"]
            }
          },
          "response": []
        },
        {
          "name": "Unauthorized Request",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/products",
              "host": ["{{base_url}}"],
              "path": ["api", "products"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Performance Testing",
      "item": [
        {
          "name": "Load Test - Get All Products",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test(\"Response size is reasonable\", function () {",
                  "    pm.expect(pm.response.responseSize).to.be.below(1048576); // 1MB",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/products",
              "host": ["{{base_url}}"],
              "path": ["api", "products"]
            }
          },
          "response": []
        }
      ]
    }
  ]
}
